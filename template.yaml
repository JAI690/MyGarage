AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Nested Stack for AutoGarage


Resources:
  # Definici√≥n del API Gateway
  AutoGarageApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: auto-garage-api
      StageName: Dev
      Cors:
        AllowMethods: "'GET,POST,OPTIONS,PUT,DELETE'"
        AllowHeaders: "'Content-Type,Access-Control-Allow-Origin,Authorization'"
        AllowOrigin: "'*'"

  # Lambda Function: Get Services
  GetServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: services/get.endpointHandler
      Runtime: nodejs20.x
      CodeUri: dist/
      Description: Get a list of services
      MemorySize: 128
      Timeout: 5
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
              Resource: arn:aws:dynamodb:us-east-1:637423663433:table/Services
      Events:
        GetApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutoGarageApi
            Path: /services
            Method: GET

  # Lambda Function: Create Service
  CreateServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: services/create.endpointHandler
      Runtime: nodejs20.x
      CodeUri: dist/
      Description: Create a new service
      MemorySize: 128
      Timeout: 5
      Policies:
      - AWSLambdaBasicExecutionRole
      - Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - arn:aws:dynamodb:us-east-1:637423663433:table/Services
      Events:
        PostApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutoGarageApi
            Path: /services
            Method: POST
      Environment:
        Variables:
          JWT_SECRET: your-secret-key

  # Lambda Function: Create User
  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: users/create.endpointHandler
      Runtime: nodejs20.x
      CodeUri: dist/
      Description: Create a new user
      MemorySize: 128
      Timeout: 5
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:GetItem
              Resource: arn:aws:dynamodb:us-east-1:637423663433:table/Users/index/EmailIndex
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: arn:aws:dynamodb:us-east-1:637423663433:table/Users
      Events:
        PostApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutoGarageApi
            Path: /users
            Method: POST

  # Lambda Function: Login User
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: users/login.endpointHandler
      Runtime: nodejs20.x
      CodeUri: dist/
      Description: Login as a user
      MemorySize: 128
      Timeout: 5
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:GetItem
              Resource: arn:aws:dynamodb:us-east-1:637423663433:table/Users/*
      Events:
        PostApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutoGarageApi
            Path: /login
            Method: POST
      Environment:
        Variables:
          JWT_SECRET: your-secret-key

  #Lambda Crear Vehiculo
  CreateVehicleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: vehicles/create.endpointHandler
      Runtime: nodejs20.x
      CodeUri: dist/
      Description: Create a new vehicle associated with a user
      MemorySize: 128
      Timeout: 5
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: arn:aws:dynamodb:us-east-1:637423663433:table/Vehicles
      Events:
        PostApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutoGarageApi
            Path: /vehicles
            Method: POST
      Environment:
          Variables:
            JWT_SECRET: your-secret-key
  
  # Lambda Function: Get Vehicles by User
  GetVehiclesByUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: vehicles/getByUser.endpointHandler
      Runtime: nodejs20.x
      CodeUri: dist/
      Description: Get all vehicles associated with a user
      MemorySize: 128
      Timeout: 5
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource: arn:aws:dynamodb:us-east-1:637423663433:table/Vehicles/index/UserIndex
      Events:
        GetApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutoGarageApi
            Path: /vehicles
            Method: GET

  # Lambda Function: Create Work Order
  CreateWorkOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: orders/create.endpointHandler
      Runtime: nodejs20.x
      CodeUri: dist/
      Description: Create a new work order for a vehicle
      MemorySize: 128
      Timeout: 5
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:BatchGetItem
              Resource:
                - arn:aws:dynamodb:us-east-1:637423663433:table/Vehicles
                - arn:aws:dynamodb:us-east-1:637423663433:table/WorkOrders
            - Effect: Allow
              Action:
                - dynamodb:BatchGetItem
                - dynamodb:GetItem
              Resource:
                - "arn:aws:dynamodb:us-east-1:637423663433:table/Services"
                - "arn:aws:dynamodb:us-east-1:637423663433:table/Services/index/*"
      Events:
        PostApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutoGarageApi
            Path: /orders
            Method: POST

  # Lambda Function: Assign Mechanic
  AssignMechanicFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: orders/assignMechanic.endpointHandler
      Runtime: nodejs20.x
      CodeUri: dist/
      Description: Assign a mechanic to a work order
      MemorySize: 128
      Timeout: 5
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: arn:aws:dynamodb:us-east-1:637423663433:table/WorkOrders
      Events:
        PostApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutoGarageApi
            Path: /orders/assignMechanic
            Method: POST

  # Lambda Function: Update Order Status
  UpdateOrderStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: orders/updateStatus.endpointHandler
      Runtime: nodejs20.x
      CodeUri: dist/
      Description: Update the status of a work order
      MemorySize: 128
      Timeout: 5
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: arn:aws:dynamodb:us-east-1:637423663433:table/WorkOrders
      Events:
        PutApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutoGarageApi
            Path: /orders/status
            Method: PUT

  # Lambda Function: Get Client Orders
  GetClientOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: orders/getByUser.endpointHandler
      Runtime: nodejs20.x
      CodeUri: dist/
      Description: Get all orders for a specific client
      MemorySize: 128
      Timeout: 5
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - arn:aws:dynamodb:us-east-1:637423663433:table/WorkOrders/index/ClientIndex
      Events:
        GetApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutoGarageApi
            Path: /orders
            Method: GET

  GetOpenWorkOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: orders/getAllNotClosed.endpointHandler
      Runtime: nodejs20.x
      CodeUri: dist/
      Description: Get all orders that are not closed
      MemorySize: 128
      Timeout: 5
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref WorkOrdersTable
      Events:
        GetApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutoGarageApi
            Path: /orders/open
            Method: GET

  DeleteServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: services/deleteService.endpointHandler
      Runtime: nodejs20.x
      CodeUri: dist/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
      Events:
        DeleteApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutoGarageApi
            Path: /services/{id}
            Method: DELETE
      


  # Tabla Services
  ServicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Services
      AttributeDefinitions:
        - AttributeName: ServiceID
          AttributeType: S
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: ServiceID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: NameIndex
          KeySchema:
            - AttributeName: Name
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # Tabla Vehicles
  VehiclesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Vehicles
      AttributeDefinitions:
        - AttributeName: VehicleID
          AttributeType: S
        - AttributeName: UserID
          AttributeType: S
      KeySchema:
        - AttributeName: VehicleID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: UserID
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # Tabla Clients
  ClientsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Clients
      AttributeDefinitions:
        - AttributeName: ClientID
          AttributeType: S
        - AttributeName: Email
          AttributeType: S
      KeySchema:
        - AttributeName: ClientID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: Email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # Tabla WorkOrders
  WorkOrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WorkOrders
      AttributeDefinitions:
        - AttributeName: OrderID
          AttributeType: S
        - AttributeName: ClientID
          AttributeType: S
        - AttributeName: VehicleID
          AttributeType: S
      KeySchema:
        - AttributeName: OrderID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ClientIndex
          KeySchema:
            - AttributeName: ClientID
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: VehicleIndex
          KeySchema:
            - AttributeName: VehicleID
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST


  # Tabla Invoices
  InvoicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Invoices
      AttributeDefinitions:
        - AttributeName: InvoiceID
          AttributeType: S
        - AttributeName: ClientID
          AttributeType: S
      KeySchema:
        - AttributeName: InvoiceID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ClientIndex
          KeySchema:
            - AttributeName: ClientID
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # Tabla Users
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: UserID
          AttributeType: S
        - AttributeName: Email
          AttributeType: S
      KeySchema:
        - AttributeName: UserID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: Email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
